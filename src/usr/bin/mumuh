#!/bin/env bash

# Define an array with text formatting options, to get rid of the single value per format thing.
declare -A TEXTFORMATTING=(
    [RED]=$(tput setaf 1)
    [GREEN]=$(tput setaf 2)
    [YELLOW]=$(tput setaf 3)
    [BRIGHT]=$(tput bold)
    [NORMAL]=$(tput sgr0)
)

# If arguments are given, prepare some of the functionality
if [[ $# -gt 0 ]];
then
    usage() {
        printf '%s\n' "######################################################################"
        printf '%s\n' "################### ${TEXTFORMATTING[BRIGHT]}Manjaro update helper script.${TEXTFORMATTING[NORMAL]}#####################"
        printf '%s\n' "######################################################################"
        printf '%s\n' "# This script is just a wrapper for pamac, with the exception that   #"
        printf '%s\n' "# if there were any errors, it allows you to copy them, neatly       #"
        printf '%s\n' "# formatted for use as. or with a forum post, along with all the     #"
        printf '%s\n' "# details required for requesting assistance.                        #"
        printf '%s\n' "# It also allows you to set the required suddoers permissions in     #"
        printf '%s\n' "# '/etc/sudoers.d'                                                   #"
        printf '%s\n' "#                                                                    #"
        printf '%s\n' "# Usage:                                                             #"
        printf '%s\n' "#     * ${TEXTFORMATTING[BRIGHT]}--addsudoers${TEXTFORMATTING[NORMAL]}, or ${TEXTFORMATTING[BRIGHT]}-a${TEXTFORMATTING[NORMAL]}                                          #"
        printf '%s\n' "#       Will add a file called ${TEXTFORMATTING[BRIGHT]}/etc/sudoers.d/manjaro-update-helper${TEXTFORMATTING[NORMAL]}  #"
        printf '%s\n' "#       with entries to enable running this script as the current    #"
        printf '%s\n' "#       user without a password.                                     #"
        printf '%s\n' "#       ${TEXTFORMATTING[BRIGHT]}CARE MUST BE TAKED WITH THE ${TEXTFORMATTING[GREEN]}/etc/sudoers${TEXTFORMATTING[NORMAL]} FILE, AS DOING IT   #"
        printf '%s\n' "#       INNCORRECTLY CAN LEAD TO BEING LOCKED OUT OF THE SYSTEM.     #"
        printf '%s\n' "#       ${TEXTFORMATTING[RED]}PLEASE BE ${TEXTFORMATTING[BRIGHT]}VERY${TEXTFORMATTING[NORMAL]}${TEXTFORMATTING[RED]} CAREFUL.${TEXTFORMATTING[NORMAL]}                                      #"
        printf '%s\n' "#     * ${TEXTFORMATTING[BRIGHT]}--skipbackup${TEXTFORMATTING[NORMAL]}, or ${TEXTFORMATTING[BRIGHT]}-s${TEXTFORMATTING[NORMAL]}                                          #"
        printf '%s\n' "#       This will cause the update process to skip the backup step   #"
        printf '%s\n' "#       for the update.                                              #"
        printf '%s\n' "#     * ${TEXTFORMATTING[BRIGHT]}--custombackupcommand${TEXTFORMATTING[NORMAL]}, or ${TEXTFORMATTING[BRIGHT]}-c${TEXTFORMATTING[NORMAL]}                                 #"
        printf '%s\n' "#       This argument allows for specifying a custom backup command, #"
        printf '%s\n' "#       for if you want to use something other than the default      #"
        printf '%s\n' "#       timeshift one, or even is you use something other than       #"
        printf '%s\n' "#       timeshift.                                                   #"
        printf '%s\n' "#       ${TEXTFORMATTING[BRIGHT]}NOTE:${TEXTFORMATTING[NORMAL]}                                                        #"
        printf '%s\n' "#       If ${TEXTFORMATTING[BRIGHT]}--skipbackup${TEXTFORMATTING[NORMAL]}, or ${TEXTFORMATTING[BRIGHT]}-s${TEXTFORMATTING[NORMAL]} is specified, then specifying this    #"
        printf '%s\n' "#       will have no effect.                                         #"
        printf '%s\n' "#     * ${TEXTFORMATTING[BRIGHT]}--help${TEXTFORMATTING[NORMAL]}, or ${TEXTFORMATTING[BRIGHT]}-h${TEXTFORMATTING[NORMAL]}                                                #"
        printf '%s\n' "#       Show this help and exit.                                     #"
        printf '%s\n' "#     If no arguments are passed, the script performs its main       #"
        printf '%s\n' "#     functionality.                                                 #"
        printf '%s\n' "# Examples:                                                          #"
        printf '%s\n' "#     * To add the current user to the sudoers list:                 #"
        printf '%s\n' "#        mumu --addsudoers                                           #"
        printf '%s\n' "#          OR                                                        #"
        printf '%s\n' "#        mumu -a                                                     #"
        printf '%s\n' "#     * If you wish to skip performing backups for this execution:   #"
        printf '%s\n' "#        mumu --skipbackup                                           #"
        printf '%s\n' "#          OR                                                        #"
        printf '%s\n' "#        mumu -s                                                     #"
        printf '%s\n' "#     * If you want to use a custom command:                         #"
        printf '%s\n' "#        mumu --custombackupcommand=<custom command>                 #"
        printf '%s\n' "#          OR                                                        #"
        printf '%s\n' "#        mumu -c <custom command>                                    #"
        printf '%s\n' "######################################################################"
        exit 0
    }

    addsudoers () {
        # Lets get the username to add to the sudoers list
        USERNAMETOSUDOERS=$(whoami)
        # Only continue if it is not root
        if [ "$USERNAMETOSUDOERS" == "root" ]; then
            printf '%s\n' "${TEXTFORMATTING[RED]}${TEXTFORMATTING[BRIGHT]}SCRIPT SHOULDN'T BE RUN AS ROOT. EXITING.${TEXTFORMATTING[NORMAL]}"
            exit 9
        fi
        sudo install --owner=root --group=root --mode=0440 /dev/null /etc/sudoers.d/manjaro-update-helper
        SUDOERSFILECREEATION=$?
        if [[ ${SUDOERSFILECREEATION} -eq 0 ]]; then
            printf '%s\n' "${TEXTFORMATTING[GREEN]}Successfully created file ${TEXTFORMATTING[BRIGHT]}/etc/sudoers.d/manjaro-update-helper${TEXTFORMATTING[NORMAL]}"
        else
            printf '%s\n' "${TEXTFORMATTING[RED]}Failed create file ${TEXTFORMATTING[BRIGHT]}/etc/sudoers.d/manjaro-update-helper${TEXTFORMATTING[NORMAL]} ${TEXTFORMATTING[RED]}due to not having the required permissions."
            exit 8
        fi
        SUDOERSENTRY="${USERNAMETOSUDOERS} ALL=(ALL) NOPASSWD: /usr/bin/timeshift *,/usr/bin/pamac"
        echo "${SUDOERSENTRY}" | sudo tee --append /etc/sudoers.d/manjaro-update-helper > /dev/null
        SUDOERSENTRYADDED=$?
        if [[ $SUDOERSENTRYADDED -eq 0 ]]; then
                printf '%s\n' "sudoers entry created successfully in ${TEXTFORMATTING[BRIGHT]}/etc/sudoers.d/manjaro-update-helper${TEXTFORMATTING[NORMAL]}."
        else
                printf '%s\n' "${TEXTFORMATTING[RED]}Failed to create sudoers entry for user ${TEXTFORMATTING[BRIGHT]}${USERNAMETOSUDOERS}${TEXTFORMATTING[NNORMAL]}${TEXTFORMATTING[RED]} in ${TEXTFORMATTING[BRIGHT]}/etc/sudoers.d/manjaro-update-helper${TEXTFORMATTING[NORMAL]}."
        fi
        # Some housekeeping for this functionality, the adding sudoers functionality.
        unset USERNAMETOSUDOERS USEREXISTS SUDOERSENTRY SUDOERSFILECREEATION SUDOERSENTRYADDED
        exit 0
    }
    # Since arguments given, parse them
    while [[ $# -gt 0 ]]; do
        case $1 in
            --help|-h)
                usage
            ;;
            --addsudoers|-a)
                addsudoers "$2"
            ;;
            --skipbackup|-s)
                SKIPBACKUP=true
                shift
            ;;
            --custombackupcommand=*|-c)
                CUSTOMBUARG=$1
                if [[ "$CUSTOMBUARG" == *"rm"* ]]; then
                    SKIPBACKUP=true
                    printf '%s\n' "${TEXTFORMATTING[RED]}${TEXTFORMATTING[YELLOW]}Potentially dangerous custom command specified. Ignoring and contnuing.${TEXTFORMATTING[NORMAL]}"
                else
                    CUSTOMBUCMD=$(echo "${CUSTOMBUARG}" | cut -f2 -d=)
                fi
                shift
            ;;
        esac
    done
fi

# Make sure the script isnt's being run as root
[ "$(id -u)" -eq "0" ] && printf '%s\n' "${TEXTFORMATTING[BRIGHT]}You are attempting to run the script as root which isn't allowed. Exiting.${TEXTFORMATTING[NORMAL]}" | tee /dev/tty | systemd-cat --identifier=mumuh --priority=err && exit 1

# For making eval statements safer later in the script
function token_quote {
    local quoted=()
    for token; do
        quoted+=( "$(printf '%q' "$token")" )
    done
    printf '%s\n' "${quoted[*]}"
}

# Check that there are updates, and confirm with the use whether to apply them or not.
UPDATES_AVAILABLE=$(pamac checkupdates | head -n 1 | awk '{print $1}')
[[ $UPDATES_AVAILABLE -gt 0 ]] && read -r -p "There are ${TEXTFORMATTING[BRIGHT]}${UPDATES_AVAILABLE}${TEXTFORMATTING[NORMAL]} updates available, continue? [Y/n]: " CONTINUEUPDATE
CONTINUEUPDATE=${CONTINUEUPDATE:-Y}
if [[ ${CONTINUEUPDATE} =~ [nN] ]];
then
    echo "Upgrade cancelled." | tee /dev/tty | systemd-cat --identifier=mumuh && exit 7
fi
RUNTIMESTAMP=$(date +%Y.%m.%d@%H:%M)
RUNDATE=$(echo "$RUNTIMESTAMP" | awk -F'@' '{print $1}')

# Create temporary logs directory
[[ ! -d "/tmp/manjaro-update" ]] && mkdir --parents "/tmp/manjaro-update/logs.${RUNDATE}"
[[ -d "/tmp/manjaro-update/logs.${RUNDATE}" ]] && LOGSDIR="/tmp/manjaro-update/logs.${RUNDATE}"

# Functionality to accomplish this has been added with the --addsudoers or -a argument
# --------------------------------------------------------------------------------------------------
# Make the timeshift backup
# If wished, the following can be added to /etc/sudoers.d/upgradescript to allow this command to run without requiring a password:
#           <username> ALL=(ALL) NOPASSWD: /usr/bin/timeshift *
#
# Replace '<username>' with the user name the script is bein run from.
# This will allow all "timeshift" commands to be run with 'sudo' withoout requiring a password
# If choosing to add the current user to sudoers, with the '-a' or '--addsudoers' arguments, this will be done automatically.
# BUT BE CAREFUL WITH sudoers. You can lock yourself out of your system with it. Hence the recommendation to create a new file in /etc/sudoers.d/

###
# START backup section
###
if [[ -z ${SKIPBACKUP+x} ]]; # Check if backup creating specified.
then
    printf '%s\n' "* ${TEXTFORMATTING[BRIGHT]}${TEXTFORMATTING[YELLOW]}Not skipping backup creation.${TEXTFORMATTING[NORMAL]}" | tee /dev/tty | systemd-cat --identifier=mumuh
    if [[ -v CUSTOMBUCMD ]]; # Check if custom backup command specified.
    then
        BACKUPCMD=$CUSTOMBUCMD
    else
        printf '%s\n' "* ${TEXTFORMATTING[BRIGHT]}${TEXTFORMATTING[YELLOW]}No custom backup command specified.${TEXTFORMATTING[NORMAL]}" | tee /dev/tty | systemd-cat --identifier=mumuh
        if ! command -v sudo timeshift 1> /dev/null 2> /dev/null
        then
            printf '%s\n' "* ${TEXTFORMATTING[BRIGHT]}${TEXTFORMATTING[YELLOW]}Timeshift ${TEXTFORMATTING[RED]}not${TEXTFORMATTING[YELLOW]} found.${TEXTFORMATTING[NORMAL]}" | tee /dev/tty | systemd-cat --identifier=mumuh
            echo
            printf '%s\n' "* ${TEXTFORMATTING[BRIGHT]}${TEXTFORMATTING[RED]}Exiting.${TEXTFORMATTING[NORMAL]}" | tee /dev/tty | systemd-cat --identifier=mumuh
            exit 2
        else
            BACKUPCMD="sudo timeshift --create --comments \"$(date +%Y.%m.%d@%H:%M)\"' - Pre-update'"
        fi
    fi
else # backup creation skipped
    printf '%s\n' "${TEXTFORMATTING[BRIGHT]}${TEXTFORMATTING[YELLOW]}Skipping backup creation.${TEXTFORMATTING[NORMAL]}"
fi

if [[ -n ${BACKUPCMD+x} ]];
then
    printf '%s\n' "Using ${TEXTFORMATTING[BRIGHT]}${TEXTFORMATTING[YELLOW]}${CUSTOMBUCMD}${TEXTFORMATTING[NORMAL]} to create the backup snapshot."
    eval "${BACKUPCMD}"
    BACKUP_COMMAND_RESULT=$?
fi
if [[ -n ${SKIPBACKUP} ]]; # don't create backup
then
    # However, if it was given, set the output as a success, so the rest of the script can carry on.
    BACKUP_COMMAND_RESULT=0
    printf '%s\n' "${TEXTFORMATTING[YELLOW]}${TEXTFORMATTING[BRIGHT]}Skipping backup creation.${TEXTFORMATTING[NORMAL]}"
fi

###
# END backup section
###

###
# START upgrade section
###
# If the backup was successful, continue with the upgrade
if [[ $BACKUP_COMMAND_RESULT -eq 0 ]];
then
    if [ -z ${LOGSDIR+x} ];
    then
        echo "\$LOGSDIR is unset. Cannot log process";
        LOGSDIR=""
    else
        touch "$LOGSDIR""/system-upgrade.output";
        SYSUPDLOGFILE=$LOGSDIR"/system-upgrade.output";
    fi
    if [[ -z ${SKIPBACKUP+x} ]];
    then
        echo
        echo -e '\033[0;92mPre-upgrade backup snapshot successfully created. Continuing with upgrade...\e[0m' | tee /dev/tty | systemd-cat --identifier=mumuh --priority=info
        echo
    fi
    PAMAC_CLI_AUTH=1 pamac upgrade --force-refresh --enable-downgrade > >(tee --append "${SYSUPDLOGFILE}")
    UPGRADE_OFFICIAL_RESULT=$?
    # Check if the official update from the repositories is successful, and if so continue with the AUR upgrade.
    if [ "${UPGRADE_OFFICIAL_RESULT}" -eq "0" ];
    then
        if command -v kdialog &> /dev/null
        then
            kdialog --title="System upgrade" --passivepopup="<b>Official package</b> upgrade successful, using <code>pamac upgrade</code> successfully finished." 5
        fi
        if [ -z ${LOGSDIR+x} ];
        then
            echo "\$LOGSDIR is unset. Cannot log process";
            LOGSDIR=""
        else
            touch "$LOGSDIR""/aur-upgrade.output";
            AURUPDLOGFILE=$LOGSDIR"/aur-upgrade.output";
        fi
        # Let's update AUR packages now.
        PAMAC_CLI_AUTH=1 pamac upgrade --enable-downgrade --aur --devel  > >(tee --append "${AURUPDLOGFILE}")
        UPGRADE_AUR_RESULT=$?
        # Check if AUR packages' upgrade was successful, and if so, continue with merging .pacnew files.
        if [ "${UPGRADE_AUR_RESULT}" -eq "0" ];
        then
            if command -v kdialog &> /dev/null
            then
                kdialog --title="System upgrade" --passivepopup="<b>AUR package</b> upgrade successful, using <code>pamac upgrade</code> successfully finished." 5
            fi
            echo -e '\033[0;92mAUR package upgrade, using pamac upgrade, successfully finished.\e[0m' | tee /dev/tty | systemd-cat --identifier=mumuh --priority=info
            # An now, we have to merge any .pacnew files.
            sudo DIFFPROG=meld pacdiff
            NEWMERGE_RESULT=$?
            # Check if merging .pacnew files were successful and if so, show success notification.
            if [[ $NEWMERGE_RESULT -eq 0 ]];
            then
                if command -v kdialog &> /dev/null
                then
                    kdialog --title="System upgrade" --passivepopup="<b><code>.pacnew</code></b> files successfully, merged." 5
                fi
                echo -e '\033[0;92m.pacnew files successfully merged.\e[0m' | tee /dev/tty | systemd-cat --identifier=mumuh --priority=info
            else
                echo -e '\033[0;91mAn error occurred during merging of the .pacnew files.\e[0m' | tee /dev/tty | systemd-cat --identifier=mumuh --priority=err
                exit 6
            fi
        # Show noptification that the AUR packages' update was unsuccessful.
        else
            if command -v kdialog &> /dev/null
            then
                kdialog --ok-label='OK' --msgbox="<b>AUR package</b>(s) upgrade failed using <b><code>pamac upgrade</code></b>.<br /><b><i>Human intervention required.</b></i><br/></b>Not continuing.</b>"
            fi
            echo -e '\033[0;91mAUR package using pamac upgrade failed.\e[0m' | tee /dev/tty | systemd-cat --identifier=mumuh --priority=err
            exit 5
        fi
    # Show notification that official packackages' updates was unsuccessful.
    else
        if command -v kdialog &> /dev/null
        then
            kdialog --ok-label='OK' --msgbox="There was an error during the upgrade procedure using <b><code>pamac upgrade</code></b>.<br /><b><i>Human intervention required.</b></i>"
        fi
        exit 4
    fi
else # If timeshift wasn't successful, notify, log and exit.
    echo
    echo -e '\033[0;91m!!! An error occurred while making the pre-update backup snapshot. Not continuing. !!! \e[0m'  | tee /dev/tty | systemd-cat --identifier=mumuh --priority=err
    if command -v kdialog &> /dev/null
    then
        kdialog --ok-label='OK' --msgbox="An error occurred while making the backup snapshot.<br /><br/> </b>Not continuing.</b>"
    fi
    echo
    exit 3
fi
###
# END backup section
###
# If there were errors with the official packages' upgrade, show prompt about copying the process' output to the clipboard.
if [[ $UPGRADE_OFFICIAL_RESULT -ne 0 ]];
then
    read -r -p "There were errors while performing the updates from the official repositories. Copy result? [y/N]: " COPYOFFICIALCHOICE
    COPYOFFICIALCHOICE=${COPYOFFICIALCHOICE:-N}
fi
# If there were errors with the AUR packages' upgrade, show prompt about copying the process' output to the clipboard.
if [[ $UPGRADE_AUR_RESULT -ne 0 ]];
then
    read -r -p "There were errors while performing the updates from the AUR. Copy result? [y/N]: " COPYAURCHOICE
    COPYAURCHOICE=${COPYAURCHOICE:-N}
fi

# Get the information required for the logs as well as a generated forum post
SYSTEMINFO=$(inxi --admin --verbosity=7 --filter --no-host --width)
MIRRORSTATUS=$(pacman-mirrors --status)

###
# START logging section
###
LOGMESSAGE="${RUNDATE} upgrade log:
Official package upgrades:

$(cat "$SYSUPDLOGFILE")

AUR packacge upgrade:

$(cat "$AURUPDLOGFILE")

Mirror status:

${MIRRORSTATUS}

System information (inxi --admin --verbosity=7 --filter --no-host --width):

${SYSTEMINFO}
"

# Copy the log for more permanent storage, so that it can be retrived later
[[ ! -d "/var/log/manjaro-update-helper" ]] && sudo mkdir "/var/log/manjaro-update-helper"
if [[ $("${LOGMESSAGE}" > "${LOGSDIR}""/${RUNTIMESTAMP}.update.log") ]]; then
    printf '%s\n' "${TEXTFORMATTING[GREEEN]}Log output successfully saved to ${TEXTFORMATTING[BRIGHT]}/var/log/manjaro-update-helper/${RUNTIMESTAMP}.update.log${TEXTFORMATTING[NORMAL]}"
    notify-send --urgency=info --icon=checkbox --app-name="MUMUH" "Mumuh upgrade" "\n\nLogfile saved at \<code\>\/var/log/manjaro-update-helper/${RUNTIMESTAMP}.update.log<\/code\>"
fi
###
# END logging section
###

###
# START post generation section
###
# Compose a forum message.
if [[ $COPYOFFICIALCHOICE =~ [Yy] ]] || [[ $COPYAURCHOICE =~ [Yy] ]];
then
    MESSAGE='I encountered errors during the last update, which I performed on  **`'${RUNDATE}'`**. Please find my information below:

'
fi

# If chosen, add official update output.
if [[ $COPYOFFICIALCHOICE =~ [Yy] ]];
then
    MESSAGE+="##### \`pamac upgrade --force-refresh --enable-downgrade\`:

[details=View details]
~~~
$(cat "$SYSUPDLOGFILE")
~~~
[/details]

"
fi

# If chosen, add AUR packages' output.
if [[ $COPYAURCHOICE =~ [Yy] ]];
then
    MESSAGE+="##### \`pamac upgrade --enable-downgrade --aur --devel\`:

[details=View details]
~~~
$(cat "$AURUPDLOGFILE")
~~~
[/details]

"
fi

# Add system information gathered above, if any of the outputs are copied.
if [[ $COPYOFFICIALCHOICE =~ [Yy] ]] || [[ $COPYAURCHOICE =~ [Yy] ]];
then
    MESSAGE+="##### My **\`inxi --admin --verbosity=7 --filter --no-host --width\`**:

~~~
$SYSTEMINFO
~~~

##### \`pacman-mirrors --status\`:

[details=View details]

~~~
$MIRRORSTATUS
~~~

[/details]


***

# PLEASE REMOVE THIS TEXT AND ADD YOUR OWN DESCRIPTION HERE, BELOW THE LINE!

"
fi
###
# END forum post generation section
###

# if [[ $? = 0 ]];
# then
#     echo
#     echo "Message to start forum topic successfully copied to clipboard.
# Please visit https://forum.manjaro.org/ and start a new support topic and paste the copied messaage ass the main post, but only after checking if the issue hasn't been asked and resolved already.
# Remember that a forum account is required for creating a new support request and that the forum is manned by volunteers, so no demand can be madee on their time.
# Please see https://forum.manjaro.org/t/howto-request-support/91463 for more information and guides to request support.
# "
# fi
# Some of the logs are only stored in RAM, so will be cleared on shutdown or restart, but let's take care of older log files.
printf '%s\n' "${TEXTFORMATTING[BRIGHT]}${TEXTFORMATTING[YELLOW]}Cleaning older log files...${TEXTFORMATTING[NORMAL]}"
(cd /var/log/manjaro-update-helper && ls -tr | head -n -5 | xargs -I{} rm --force)
# Unset any and all variables, functions and whatever else was used.
unset TEXTFORMATTING UPDATES_AVAILABLE CONTINUEUPDATE RUNTIMESTAMP RUNDATE BACKUP_COMMAND_RESULT LOGSDIR SYSUPDLOGFILE UPGRADE_AUR_RESULT NEWMERGE_RESULT COPYOFFICIALCHOICE COPYAURCHOICE SYSTEMINFO MESSAGE